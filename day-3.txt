#!/usr/bin/python

from ansible.module_utils.basic import AnsibleModule
import boto3
from botocore.exceptions import BotoCoreError, ClientError

def manage_instance(module):
    instance_id = module.params['instance_id']
    desired_state = module.params['state']
    region = module.params['region']

    ec2 = boto3.client('ec2', region_name=region)

    try:
        response = ec2.describe_instances(InstanceIds=[instance_id])
        current_state = response['Reservations'][0]['Instances'][0]['State']['Name']

        if desired_state == 'running' and current_state != 'running':
            ec2.start_instances(InstanceIds=[instance_id])
            module.exit_json(changed=True, msg=f"Instance {instance_id} started.")
        elif desired_state == 'stopped' and current_state != 'stopped':
            ec2.stop_instances(InstanceIds=[instance_id])
            module.exit_json(changed=True, msg=f"Instance {instance_id} stopped.")
        else:
            module.exit_json(changed=False, msg=f"Instance {instance_id} already {current_state}.")
    except (BotoCoreError, ClientError) as e:
        module.fail_json(msg=str(e))

def main():
    module_args = dict(
        instance_id=dict(type='str', required=True),
        state=dict(type='str', required=True, choices=['running', 'stopped']),
        region=dict(type='str', required=True)
    )
    module = AnsibleModule(argument_spec=module_args)
    manage_instance(module)

if __name__ == '__main__':
    main()





----

- name: Manage ec2 module
  hosts: localhost
  tasks:
    - name: start ec2 instance
      ec2_manage:
        instance_id: 'i-019a5995caf648cea'
        state: "stopped"
        region: 'us-west-2'
      register: result

    - name: print result message
      debug:
        msg: "{{result.msg}}"

-------------

[defaults]
inventory = inventory.ini
private_key_file= amar-boa-adv.pem
remote_user= ubuntu
timeout= 30
host_key_checking= False
module_utils=./custom_modules
library= ./custom_modules
